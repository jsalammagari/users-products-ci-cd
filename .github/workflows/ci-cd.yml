# Name of the workflow
name: Python Flask application CI/CD pipeline

# Trigger the workflow on push or pull request to any branch
on: [push, pull_request]

# Define jobs
jobs:
  build-and-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE so your job can access it
    - uses: actions/checkout@v2

    # Sets up a Python environment using the specified version
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    # Install Python dependencies from the requirements.txt file if it exists
    # If the requirements file is not found, the command will not cause the workflow to fail
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r monolithic/requirements.txt; fi

    # Install flake8 for the linting step below
    - name: Install flake8
      run: |
        pip install flake8

    # Run flake8 for linting, checking for Python syntax errors or undefined names
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # Run tests using pytest
    - name: Test with pytest
      run: |
        pytest

    # This is a placeholder for deployment steps which should be customized as per your deployment process
    # - name: Deploy to Production
    #   run: <deployment command>
    #   env:
    #     DEPLOYMENT_SECRET: ${{ secrets.DEPLOYMENT_SECRET }}
