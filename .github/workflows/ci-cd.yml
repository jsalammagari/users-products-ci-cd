# This is the name of your workflow, it can be anything
name: Python-Flask application CI/CD pipeline

# This specifies when the workflow should run. 'push' means it will run on every push to any branch.
# 'pull_request' means it will run on pull requests to any branch.
on: [push, pull_request]

# This section defines the jobs that will run as part of your workflow
jobs:
  # This is the first job, called 'build-and-test'
  build-and-test:
    # Specifies that the job should run on the latest version of Ubuntu
    runs-on: ubuntu-latest

    # These are the steps that will be run as part of this job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Sets up a Python environment with version 3.8
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    # Installs the dependencies from the requirements.txt file
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Runs linting using flake8 to check for Python syntax errors or undefined names
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # Runs tests using pytest
    - name: Test with pytest
      run: |
        pytest

    # If tests pass, this section could be used to deploy the application to a server
    # This part is commented out because it needs to be customized based on your deployment needs
    # - name: Deploy to Production
    #   run: <deployment command>
    #   env:
    #     DEPLOYMENT_SECRET: ${{ secrets.DEPLOYMENT_SECRET }}